import React, { Component } from 'react';
import Grid from '@material-ui/core/Grid';
import PropTypes from 'prop-types';
import axios from 'axios';

import Fav from '../components/Fav';
import Profile from '../components/Profile';

import { connect } from 'react-redux';

class subscriptions extends Component {
    
    constructor(props){
        super(props);
        console.log(this.props);
        this.state = {
            results: [],
            loadUsers: this.props.user.following,
            loading: true
        }

        
    }
    
    getData = (username) => {
        //console.log("CURRENT USER");
        //console.log(username);
        //console.log("USERS");
        //console.log(this.state.loadUsers);
        
            axios
                .get(`/fav/sub/${username}`)
                .then(res => {
                    console.log("RES");
                    console.log(res);
                    //favs = favs.concat(res.data);
                    this.setState({results: this.state.results.concat(res.data)})
                })
                .catch(err => {
                    console.log(err);
                    console.log("CANT GET favs");
                })
        
    }
    
    getResults = () => {
        const { loadUsers } = this.state;
        if(loadUsers.length === 0){
            this.setState({loading: false});
        } else if(loadUsers.length === 1){
            this.setState({loading: false});
            this.setState({loadUsers: loadUsers.slice(1)});
            this.getData(loadUsers[0].username);
        } else {
            this.setState({loadUsers: loadUsers.slice(1)});
            this.getData(loadUsers[0].username);
        }
    }

    renderResults = () => {
        const { results } = this.state;
        console.log("RESULTS");
        console.log(results);
        //console.log("NOT LOADDED");
        //console.log(loadUsers);
        results.sort(function(a, b) {
            var keyA = new Date(a.createdAt),
              keyB = new Date(b.createdAt);
            if (keyA < keyB) return -1;
            if (keyA > keyB) return 1;
            return 0;
        });
        
       if(results && results.length > 0){
            return( 
                results.map( fav => {
                    return (
                        <Fav key={fav.favId} fav={fav}/>
                    )
                })
            );
       }
    }

    render() {
        return (
        <Grid container spacing={16}>
            <Grid item sm={8} xs={12}>
            {this.state.loading === true  && this.getResults()}
            {this.state.loading === false && this.renderResults()}
            </Grid>
            <Grid item sm={4} xs={12}>
            <Profile />
            </Grid>
        </Grid>
        );
    }
}

subscriptions.propTypes = {
  user: PropTypes.object.isRequired
};

const mapStateToProps = (state) => ({
  user: state.user
});

export default connect(
  mapStateToProps
)(subscriptions);
